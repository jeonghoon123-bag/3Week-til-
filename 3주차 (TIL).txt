3주차 내용 요약(TIL)
● 객체 지향 프로그래밍(서로 다른 객체들의 상호작용으로 프로그램을 동작하게 하는 프로그래밍)
- 객체란? (현실속에 없어도 상태와 행위로 표현 가능한것)
- 클래스란? (사용자 정의 데이터 타입 ): 설계도 ,틀 역할을 함
- 접근 지정자(_): 접근 범위를 지정하는 것 -> private
- 생성자(class): 객체가 생성될 때 초기화 작업을 수행하는 특수한 메서드
- Getter: 값을 읽을 때 사용 -> Getter만 있으면 필드 값 직접 변경 못함
- Setter: 값을 수정할 때 사용
- 상속: 기존의 클래스가 가지고 있는 필드와 메소드를 그대로 물려받은 새로운 클래스를 만드는 것- 자식이 부모를 선택할 수 있다
	- 공통적인 내용을 부모 클래스에 두고 자식 클래스가 상속을 받아 일관되고 효율적인 프로그래밍이 가능
	- 구조
		class 자식클래스 extends 부모클래스 {
		오버라이딩
- 오버라이딩 : 상속의 개념을 포함, 부모로부터 물려받은 메소드를 자식 클래스에서 재정의 하는 것
- 추상 클래스(abstract): 구현되지 않은 메서드를 가짐 -> 이를 반드시 자식 클래스에서 구현해야 함 -> 코드 재사용성과 유지보수성을 높임
- 열거형(Enum): 미리 정의된 고정된 값들의 집합을 나타내는 자료형 -> 상태 관리할때 유용함

● 컬렉션
- list: 요소들을 순서대로 저장, 요소들의 값 중복 가능, 요소를 수정, 삭제, 추가 가능, 인덱스를 통해 접근 -> 순서대로 처리해야 할 데이터에 적합
- map: 키-값 형태로 데이터를 저장하는 컬렉션, 순서 상관 X, 수정, 삭제, 추가 가능 -> 키로 요소를 찾을때 적합
- set: 요소들의 값 중복 X, 순서 상관 X, 삭제, 추가 가능 -> 중복을 제거할때 적합

● 함수형 프로그래밍
-forEach문(리스트의 모든 요소를 한 번씩 순회하며 특정 작업을 수행할때 사용한다), (for문과 비슷하지만 forEach문은 인덱스에 접근할수 없고 느리다.)
